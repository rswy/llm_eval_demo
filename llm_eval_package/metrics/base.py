from abc import ABC, abstractmethod

class BaseMetric(ABC):
    """
    Abstract base class for all evaluation metrics.
    All concrete metric implementations must inherit from this class
    and implement the abstract methods.
    """

    def __init__(self, name: str):
        """
        Initializes the BaseMetric with a given name.

        Args:
            name (str): The display name of the metric.
        """
        self.name = name

    @abstractmethod
    def compute(self, llm_output: str, reference_answer: str = None, query: str = None, **kwargs) -> float:
        """
        Abstract method to compute the score for the metric.
        Subclasses must implement this method.

        Args:
            llm_output (str): The output generated by the LLM.
            reference_answer (str, optional): The human-written reference answer.
            query (str, optional): The user's input query.
            **kwargs: Additional keyword arguments specific to a metric (e.g., sensitive_keywords for SafetyMetric).

        Returns:
            float: The computed score for the metric.
        """
        pass

    @abstractmethod
    def get_score_description(self, score: float) -> str:
        """
        Abstract method to provide a human-readable description for a given score.
        Subclasses must implement this method.

        Args:
            score (float): The score obtained from the metric.

        Returns:
            str: A description of what the score signifies.
        """
        pass